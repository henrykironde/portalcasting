% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/messages.R
\name{messages}
\alias{messages}
\alias{messageq}
\alias{break_line}
\alias{break_lines}
\alias{castle}
\title{Functions for Message Generation}
\usage{
messageq(..., quiet = FALSE, domain = NULL, appendLF = TRUE)

break_line(char = "-", reps = 60)

break_lines(nlines = 2, char = "-", reps = 60)

castle()
}
\arguments{
\item{...}{zero or more objects that can be coerced to \code{character} and are concatenated with no separator added, or a single condition object. See \code{\link[base:message]{message}}.}

\item{quiet}{\code{logical} indicator if the message should be generated.}

\item{domain}{The domain for the translation. If \code{NA}, messages will not be translated. See \code{\link[base:message]{message}} and \code{\link[base:gettext]{base::gettext}}.}

\item{appendLF}{\code{logical} indicator if messages given as a \code{character} string should have a newline appended. See \code{\link[base:message]{message}}.}

\item{char}{\code{character} value to repeated \code{reps} times to form the break line.}

\item{reps}{\code{integer}-conformable value for number of times \code{char} is replicated.}

\item{nlines}{\code{integer}-conformable value for the number of \code{\link{break_line}}s to include. Defaults to \code{2} lines.}
}
\value{
\code{messageq}: A message is given, and \code{NULL} returned, \code{\link[base:invisible]{invisible}}-ly. \cr
\code{break_line}: The \code{character} of the line to be passed to \code{\link[base:message]{message}} via \code{\link{messageq}}. \cr
\code{break_lines}: The \code{character} of the lines to be passed to \code{\link[base:message]{message}} via \code{\link{messageq}}.  \cr
\code{castle}: The \code{character} of the sandcastle to be passed to \code{\link[base:message]{message}} via \code{\link{messageq}}.
}
\description{
Create messages for use in the portalcasting pipeline. \cr \cr
\code{messageq}: Optionally generate a message based on a logical input. Uses a wrapper on \code{\link[base:message]{message}} that, given the input to \code{quiet}, generates the message(s) in \code{...} or not. \cr
\code{break_line}: Creates a horizontal line of characters ending with a newline call for messages. \cr
\code{break_lines}: Creates a set of horizontal line of characters ending with a newline call for messages. \cr
\code{castle}: Creates a text drawing of a sandcastle of characters for messages.
}
\examples{
   messageq("hi ", "how are you?")
   messageq("hi ", "how are you?", quiet = TRUE)
   break_line( )
   break_lines( )
   castle( )

}
\seealso{
Other utilities: 
\code{\link{file_ext}()},
\code{\link{foy}()},
\code{\link{ifnull}()},
\code{\link{named_null_list}()},
\code{\link{package_version_finder}()},
\code{\link{round_na.interp}()},
\code{\link{update_list}()}
}
\concept{utilities}
