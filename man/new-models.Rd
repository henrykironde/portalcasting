% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/new_model.R
\name{new models}
\alias{new models}
\alias{model_controls_template}
\alias{add_new_model}
\alias{new_model_controls}
\alias{new_model_metadata}
\alias{new_model_fit}
\alias{new_model_forecast}
\alias{new_model_interpolate}
\alias{new_model_datasets}
\alias{new_model_response}
\title{Facilitate Adding Models to a Directory}
\usage{
model_controls_template()

add_new_model(main = ".", new_model_controls = model_controls_template())

new_model_controls(...)

new_model_metadata(...)

new_model_fit(...)

new_model_forecast(...)

new_model_interpolate(...)

new_model_datasets(...)

new_model_response(...)
}
\arguments{
\item{main}{\code{character} value of the name of the main component of the directory tree.}

\item{new_model_controls}{\code{list} of controls for any new models (not in the prefab models) listed in \code{models} that are to be added to the control list and file.}

\item{...}{Named \code{list} of arguments passed to \code{\link{update_list}}.}
}
\value{
\code{model_controls_template}: \code{list} of named model controls elements, many as \code{NULL}. \cr
\code{new_model_controls}: \code{list} of named model controls. \cr
\code{new_model_metadata}: \code{list} of named model metadata elements to the controls \code{list}. \cr
\code{new_model_fit}: \code{list} of named model fit function and argument elements to the controls \code{list}. \cr
\code{new_model_forecast}: \code{list} of named forecast function and argument elements to the controls \code{list}. \cr
\code{new_model_interpolate}: \code{list} of named interpolation requirements elements to the controls \code{list}. \cr
\code{new_model_datasets}: \code{list} of named dataset elements to the controls \code{list}. \cr
\code{new_model_response}: \code{list} of named response data description elements to the controls \code{list}. \cr
\code{add_new_model}: model controls \code{list} for the new model, \code{\link[base:invisible]{invisible}}-ly.
}
\description{
Create a new model's controls. Using the \code{model_controls_template} file as a basis for the \code{list} and leveraging element-specific functions to fill in details. \cr
Each of the specific \verb{new_model_< >} functions wraps an \code{\link{update_list}} call starting with the \code{\link{model_controls_template}} as the main list and taking any named elements as inputs via \code{...}.
}
\details{
Having been created using \code{\link{new_model_controls}}, the new model's controls can either be added to the directory at directory creation (via \code{\link{setup_dir}} or related \verb{setup_<>} functions) or update (via \code{\link{update_dir}}) steps or via \code{\link{add_new_model}}.
}
\examples{
\dontrun{
   main1 <- file.path(tempdir(), "new_model_controls")
   setup_dir(main = main1)

   model_controls_template( )

   new_controls <- new_model_controls(metadata = new_model_metadata(name       = "newmod", 
                                                                    print_name = "New Model"),
                                      fit      = new_model_fit(fun  = "arima", 
                                                               args = list(x = "abundance")),
                                      response = new_model_response(link           = "normal", 
                                                                    type           = "distribution", 
                                                                    scoring_family = "normal"))
   added <- add_new_model(main               = main1, 
                          new_model_controls = new_controls)

   portalcast(main     = main1, 
              models   = "newmod", 
              datasets = "all", 
              species  = c("DM", "PP", "total"))


   unlink(main1, recursive = TRUE)
 }

}
\seealso{
Directory customization functions:
\code{\link{new datasets}}
}
\concept{customize}
